package.path = "../?.lua;" .. package.path

_G.boomstick_api = {}

require("boomstick_api/stack")

describe("SizedStack", function()
    describe("push()", function()
        it("should push one item onto the stack without errors", function()
            local stack = boomstick_api.SizedStack:new()
            assert.has_no.errors(function()
                stack:push("a")
            end)
        end)
        it("should push one item onto the stack, adding it to the underlying table", function()
            local stack = boomstick_api.SizedStack:new()
            stack:push("a")
            assert.are.same({"a"}, stack._entry_table)
        end)

        it("should push multiple item onto the stack without errors", function()
            local stack = boomstick_api.SizedStack:new()
            assert.has_no.errors(function()
                stack:push("b", "c")
            end)
        end)
        it("should push multiple item onto the stacks, adding them to the underlying table", function()
            local stack = boomstick_api.SizedStack:new()
            stack:push("a", "b", "c", "d")
            assert.are.same({"a", "b", "c", "d"}, stack._entry_table)
        end)
    end)

    describe("repeat_push()", function()
        it("should push an item n times onto the stack without errors", function()
            local stack = boomstick_api.SizedStack:new()
            assert.has_no.errors(function()
                stack:repeat_push("a", 1)
            end)
        end)
        it("should push an item n times onto the stack without errors", function()
            local stack = boomstick_api.SizedStack:new()
            assert.has_no.errors(function()
                stack:repeat_push("a", 4)
            end)
        end)

        it("should push an item n times onto the stack and have them added to the underlying table", function()
            local stack = boomstick_api.SizedStack:new()
            stack:repeat_push("a", 1)
            assert.are.same({"a"}, stack._entry_table)
        end)

        it("should push an item n times onto the stack and have them added to the underlying table", function()
            local stack = boomstick_api.SizedStack:new()
            stack:repeat_push("a", 4)
            assert.are.same({"a", "a", "a", "a"}, stack._entry_table)
        end)
    end)

    describe("list()", function()
        it("should return an empty table for an empty stack", function()
            local stack = boomstick_api.SizedStack:new()
            assert.are.same({}, stack:list())
        end)
        it("should return a table with values when values are added.", function()
            local stack = boomstick_api.SizedStack:new()
            stack:push(1,2,3,4)
            assert.are.same({1, 2, 3, 4}, stack:list())
        end)
    end)

    describe("set_size()", function()
        it("should change the size of the stack", function()
            local stack = boomstick_api.SizedStack:new()
            stack:set_size(3)
            assert.equals(stack._size, 3)
        end)
        it("resize itself, deleting elements to do so", function()
            local stack = boomstick_api.SizedStack:new()
            stack:set_size(5)
            stack:repeat_push("hello", 5)

            stack:set_size(3)
            assert.are.same(stack:list(), {"hello", "hello", "hello"})
        end)
        it("should mean that the size will be respected when pushing too many elements", function()
            local stack = boomstick_api.SizedStack:new()
            stack:set_size(4)
            stack:repeat_push("hello", 5)

            assert.are.same(stack:count(), 4)
        end)
        it("should mean that the size will be respected when pushing too many elements", function()
            local stack = boomstick_api.SizedStack:new()
            stack:set_size(4)
            stack:repeat_push("hello", 5)

            assert.are.same(stack:list(), {"hello", "hello", "hello", "hello"})
        end)
    end)

    describe("get_size()", function()
        it("should return the size of the stack, which is 100 by default", function()
            local stack = boomstick_api.SizedStack:new()
            assert.are.same(100, stack:get_size())
        end)
    end)
    describe("empty()", function()
        it("should remove every element from the stack", function()
            local stack = boomstick_api.SizedStack:new()
            stack:push("a", "b", "c", "d")
            stack:empty()
            assert.are.same({}, stack:list())
        end)
    end)

end)
