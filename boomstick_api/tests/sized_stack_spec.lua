package.path = "../?.lua;" .. package.path

_G.boomstick_api = {}

require("boomstick_api/stack")

describe("boomstick_api.sized_stack", function()
    describe("push()", function()
        it("should push one item onto the stack without errors", function()
            local stack = boomstick_api.sized_stack.init()
            assert.has_no.errors(function()
                boomstick_api.sized_stack.push(stack, "a")
            end)
        end)
        it("should push one item onto the stack, adding it to the underlying table", function()
            local stack = boomstick_api.sized_stack.init()
            boomstick_api.sized_stack.push(stack, "a")
            assert.are.same({"a"}, stack.elements)
        end)

        it("should push multiple item onto the stack without errors", function()
            local stack = boomstick_api.sized_stack.init()
            assert.has_no.errors(function()
                boomstick_api.sized_stack.push(stack, "a", "b", "c")
            end)
        end)
        it("should push multiple item onto the stacks, adding them to the underlying table", function()
            local stack = boomstick_api.sized_stack.init()
            boomstick_api.sized_stack.push(stack, "a", "b", "c")
            assert.are.same({"a", "b", "c"}, stack.elements)
        end)
    end)

    describe("repeat_push()", function()
        it("should push an item n times onto the stack without errors", function()
            local stack = boomstick_api.sized_stack.init()
            assert.has_no.errors(function()
                boomstick_api.sized_stack.repeat_push(stack, "a", 1)
            end)
        end)
        it("should push an item n times onto the stack without errors", function()
            local stack = boomstick_api.sized_stack.init()
            assert.has_no.errors(function()
                boomstick_api.sized_stack.repeat_push(stack, "a", 4)
            end)
        end)

        it("should push an item n times onto the stack and have them added to the underlying table", function()
            local stack = boomstick_api.sized_stack.init()
            boomstick_api.sized_stack.repeat_push(stack, "a", 1)
            assert.are.same({"a"}, stack.elements)
        end)

        it("should push an item n times onto the stack and have them added to the underlying table", function()
            local stack = boomstick_api.sized_stack.init()
            boomstick_api.sized_stack.repeat_push(stack, "a", 4)
            assert.are.same({"a", "a", "a", "a"}, stack.elements)
        end)
    end)

    describe("resize()", function()
        it("should change the size of the stack", function()
            local stack = boomstick_api.sized_stack.init()
            boomstick_api.sized_stack.resize(stack, 3)
            assert.equals(stack.size, 3)
        end)
        it("resize itself, deleting elements to do so", function()
            local stack = boomstick_api.sized_stack.init()
            boomstick_api.sized_stack.resize(stack, 5)
            boomstick_api.sized_stack.repeat_push(stack, "hello", 5)

            boomstick_api.sized_stack.resize(stack, 3)
            assert.are.same(stack.elements, {"hello", "hello", "hello"})
        end)
        it("should mean that the size will be respected when pushing too many elements", function()
            local stack = boomstick_api.sized_stack.init()
            boomstick_api.sized_stack.resize(stack, 4)
            boomstick_api.sized_stack.repeat_push(stack, "hello", 5)

            assert.are.same(#stack.elements, 4)
        end)
        it("should mean that the size will be respected when pushing too many elements", function()
            local stack = boomstick_api.sized_stack.init()
            boomstick_api.sized_stack.resize(stack, 4)
            boomstick_api.sized_stack.repeat_push(stack, "hello", 5)

            assert.are.same(stack.elements, {"hello", "hello", "hello", "hello"})
        end)
    end)
end)
